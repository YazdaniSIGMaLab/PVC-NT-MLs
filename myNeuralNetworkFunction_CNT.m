function [y1] = myNeuralNetworkFunction_CNT(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 28-Oct-2021 09:53:17.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;0;1;0];
x1_step1.gain = [0.2;8.69565217391304;1;38.5920016918734];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.73775896536511864632;4.1653326925728428876;-2.7849438111428548304;-4.7156488217232661597;6.0598726195584662335;0.22668368860488458116;-2.544496249006022115;-3.6605182596726444366;-8.39722646778275994;6.8534435462232172753];
IW1_1 = [-3.7916699287577029231 0.0038424156292356523648 0.0014622629560934981893 -0.038839680744709406679;0.84225364067312702421 0.6909379246050902923 -2.0549557835714855614 -0.2824268837894211015;-2.6135350569032298473 -7.8773747536092875166 -3.4651340506050694046 0.16600934398330211006;-0.78756200910386364722 -1.0530407347584431754 2.7768000999430251241 0.16057308835051792295;0.74039173530307456073 1.2768135553769919266 -3.9573060463147533561 0.070036858876722826728;-1.2837357882617106419 0.0042386317509952803687 0.00017523754794242864296 -0.051488007160726795286;-2.2449067466788674707 -7.0696553719830719231 -3.1511300847384950963 0.15940793886483053954;-2.3311616907627685791 0.074779922167227549923 0.84482546188105323015 0.31231984713396476749;-9.0098651245396190745 -0.039787223498545153111 -0.15088779071046015678 0.13179407608571935828;-0.10178598654986256711 1.8309433050897847561 -4.0989142438688350722 -0.83374158600284031806];

% Layer 2
b2 = -2.8141749855948128278;
LW2_1 = [4.9135736974683688061 9.43265792863760133 0.63357384751973178094 10.44966413665318683 5.097941954892310612 -6.3298218957713388022 -0.65135613844892570334 0.62854162737929175631 0.53367530616682734568 -1.0158895184975926806];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.86139366181274;
y1_step1.xoffset = -0.0114387;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
