function [y1] = myNeuralNetworkFunction_C3N(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 28-Oct-2021 10:02:44.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;0;1;0];
x1_step1.gain = [0.2;8.69565217391304;1;38.4939399952614];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.0013568132626591365274;-1.4234824264681584793;-4.1310923143126130341;1.5922379603138181459;-1.2884943870045661996;4.1148345100521890316;-0.40647420955862567649;-0.2836571201670211595;-0.6593129795461399878;-4.5039437768895327352];
IW1_1 = [0.052564678772757188197 -0.53084279658958566372 -0.01826435527422020158 -0.092413261175968638983;-0.066251044610399240087 -0.19716678407825855013 1.611115286547808223 0.67215348115784612215;-0.2006917053556031838 -1.9059213444105078672 1.4959474939711456809 0.57570350293249161755;0.08413110848340420167 0.40159944140018638548 -2.0538113200660035318 -0.67016560289427540287;-0.020596610078964582707 -0.084363070846084145527 1.2094407629111465496 0.75830549495416321726;1.2730678751598967224 2.2256028819639803729 -0.86063119653484199123 -0.26406637010933203813;-0.029049847682469109172 0.25162290868155778867 0.018021333156675183734 0.10463922009058239382;-0.063310665714736272247 0.99447132408496508038 2.0623724575415169902 0.57811450101218353481;-0.11635724966843405404 0.66254128675117984759 0.5564689672456685221 0.31572487270214533162;-0.95243764864102631318 -2.4740750547626579881 0.72319773662845066031 0.2411047188467473068];

% Layer 2
b2 = 0.8152098109472403209;
LW2_1 = [1.1650984855255837047 3.8425753449072730383 1.9789371012845358155 2.06798999408916373 -1.6302692168054111477 -0.73232827381671494749 3.3629248780315799117 0.17580713632304520444 -0.63759918299352968951 -2.1565146267917532086];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.41871982722601;
y1_step1.xoffset = -0.00695470000000001;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
